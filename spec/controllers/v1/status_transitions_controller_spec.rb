require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe V1::StatusTransitionsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # V1::StatusTransition. As you add validations to V1::StatusTransition, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # V1::StatusTransitionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  
  before(:each) do |t|
    unless t.metadata[:skip_before]
      @order = FactoryGirl.create(:v1_order)
      @status = FactoryGirl.build(:v1_status_transition)
      
    end
  end

  describe "GET index", :skip_before do
    it "assigns the requested v1_status_transition as @v1_status_transition" do
      @order = FactoryGirl.create(:v1_order)
      get :index, :order_id => @order.id
      expect(response.status).to eq(200)
    end
    
    it "updates to place" do
      @order = FactoryGirl.create(:v1_order)
      get :index, :order_id => @order.id, :event => "place"
      @order.reload
      expect(@order.status_transition.event).to eq "place"
    end
    it "updates to pay fails" do
      @order = FactoryGirl.create(:v1_order)
      get :index, :order_id => @order.id, :event => "pay"
      @order.reload
      expect(@order.status_transition.event).to eq nil
    end
    it "updates to pay " do
      @order = FactoryGirl.create(:v1_order, state: 1)
      get :index, :order_id => @order.id, :event => "pay"
      @order.reload
      expect(@order.status_transition.event).to eq "pay"
    end
    it "updates to pay " do
      @order = FactoryGirl.create(:v1_order, state: 1)
      get :index, :order_id => @order.id, :event => "cancel"
      @order.reload
      expect(@order.status_transition.event).to eq "cancel"
    end
  end


  # describe "PUT update" do
    # describe "with valid params" do
      # it "updates the requested v1_status_transition" do
        # put :update, {:id => @order.status_transition.id, :v1_status_transition => {:event => "place"}}
        # puts response.body
      # end
# 
      # it "assigns the requested v1_status_transition as @v1_status_transition" do
        # put :update, {:id => @status.id, :v1_status_transition => {event: "pay"}}, valid_session
        # expect(assigns(:v1_status_transition)).to eq(status_transition)
      # end
# 
    # end
# 
    # describe "with invalid params" do
      # it "assigns the v1_status_transition as @v1_status_transition" do
        # put :update, {:id => @status.to_param, :v1_status_transition => invalid_attributes}, valid_session
        # expect(assigns(:v1_status_transition)).to eq(status_transition)
      # end
# 
      # it "re-renders the 'edit' template" do
        # status_transition = V1::StatusTransition.create! valid_attributes
        # put :update, {:id => status_transition.to_param, :v1_status_transition => invalid_attributes}, valid_session
        # expect(response).to render_template("edit")
      # end
    # end
  # end

end
